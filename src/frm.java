
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import javax.swing.table.DefaultTableModel;
import net.sourceforge.tess4j.ITesseract;
import net.sourceforge.tess4j.Tesseract;
import net.sourceforge.tess4j.TesseractException;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author sams
 */
public class frm extends javax.swing.JFrame {

    private int kayitvarmi = 0;

    public int getKayitvarmi() {
        return kayitvarmi;
    }

    public void setKayitvarmi(int kayitvarmi) {
        this.kayitvarmi = kayitvarmi;
    }

    /**
     * Creates new form frm
     */
    public frm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jMenuBar3 = new javax.swing.JMenuBar();
        jMenu5 = new javax.swing.JMenu();
        jMenu6 = new javax.swing.JMenu();
        jMenuBar4 = new javax.swing.JMenuBar();
        jMenu7 = new javax.swing.JMenu();
        jMenu8 = new javax.swing.JMenu();
        jMenuBar5 = new javax.swing.JMenuBar();
        jMenu9 = new javax.swing.JMenu();
        jMenu10 = new javax.swing.JMenu();
        jMenuBar6 = new javax.swing.JMenuBar();
        jMenu11 = new javax.swing.JMenu();
        jMenu12 = new javax.swing.JMenu();
        jMenuBar7 = new javax.swing.JMenuBar();
        jMenu13 = new javax.swing.JMenu();
        jMenu14 = new javax.swing.JMenu();
        jMenuBar8 = new javax.swing.JMenuBar();
        jMenu15 = new javax.swing.JMenu();
        jMenu16 = new javax.swing.JMenu();
        jMenuBar9 = new javax.swing.JMenuBar();
        jMenu17 = new javax.swing.JMenu();
        jMenu18 = new javax.swing.JMenu();
        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuBar10 = new javax.swing.JMenuBar();
        jMenu19 = new javax.swing.JMenu();
        jMenu20 = new javax.swing.JMenu();
        jMenuBar11 = new javax.swing.JMenuBar();
        jMenu21 = new javax.swing.JMenu();
        jMenu22 = new javax.swing.JMenu();
        jMenuBar12 = new javax.swing.JMenuBar();
        jMenu23 = new javax.swing.JMenu();
        jMenu24 = new javax.swing.JMenu();
        jMenuBar13 = new javax.swing.JMenuBar();
        jMenu25 = new javax.swing.JMenu();
        jMenu26 = new javax.swing.JMenu();
        jMenuBar14 = new javax.swing.JMenuBar();
        jMenu27 = new javax.swing.JMenu();
        jMenu28 = new javax.swing.JMenu();
        jMenuBar15 = new javax.swing.JMenuBar();
        jMenu29 = new javax.swing.JMenu();
        jMenu30 = new javax.swing.JMenu();
        jMenuBar16 = new javax.swing.JMenuBar();
        jMenu31 = new javax.swing.JMenu();
        jMenu32 = new javax.swing.JMenu();
        jCheckBoxMenuItem3 = new javax.swing.JCheckBoxMenuItem();
        jCheckBoxMenuItem4 = new javax.swing.JCheckBoxMenuItem();
        jMenuBar17 = new javax.swing.JMenuBar();
        jMenu33 = new javax.swing.JMenu();
        jMenu34 = new javax.swing.JMenu();
        jMenuBar18 = new javax.swing.JMenuBar();
        jMenu35 = new javax.swing.JMenu();
        jMenu36 = new javax.swing.JMenu();
        jMenuBar19 = new javax.swing.JMenuBar();
        jMenu37 = new javax.swing.JMenu();
        jMenu38 = new javax.swing.JMenu();
        jScrollPane1 = new javax.swing.JScrollPane();
        frmTablo = new javax.swing.JTable();
        textBoxisletme = new java.awt.TextField();
        textBoxtarih = new java.awt.TextField();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        listboxButton = new javax.swing.JButton();
        uploadButton = new javax.swing.JButton();
        parsingArea = new java.awt.TextArea();
        jButton2 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        jMenu1.setText("jMenu1");

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenu2.setText("jMenu2");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        jMenu5.setText("File");
        jMenuBar3.add(jMenu5);

        jMenu6.setText("Edit");
        jMenuBar3.add(jMenu6);

        jMenu7.setText("File");
        jMenuBar4.add(jMenu7);

        jMenu8.setText("Edit");
        jMenuBar4.add(jMenu8);

        jMenu9.setText("File");
        jMenuBar5.add(jMenu9);

        jMenu10.setText("Edit");
        jMenuBar5.add(jMenu10);

        jMenu11.setText("File");
        jMenuBar6.add(jMenu11);

        jMenu12.setText("Edit");
        jMenuBar6.add(jMenu12);

        jMenu13.setText("File");
        jMenuBar7.add(jMenu13);

        jMenu14.setText("Edit");
        jMenuBar7.add(jMenu14);

        jMenu15.setText("File");
        jMenuBar8.add(jMenu15);

        jMenu16.setText("Edit");
        jMenuBar8.add(jMenu16);

        jMenu17.setText("File");
        jMenuBar9.add(jMenu17);

        jMenu18.setText("Edit");
        jMenuBar9.add(jMenu18);

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jMenuItem3.setText("jMenuItem3");

        jMenu19.setText("File");
        jMenuBar10.add(jMenu19);

        jMenu20.setText("Edit");
        jMenuBar10.add(jMenu20);

        jMenu21.setText("File");
        jMenuBar11.add(jMenu21);

        jMenu22.setText("Edit");
        jMenuBar11.add(jMenu22);

        jMenu23.setText("File");
        jMenuBar12.add(jMenu23);

        jMenu24.setText("Edit");
        jMenuBar12.add(jMenu24);

        jMenu25.setText("File");
        jMenuBar13.add(jMenu25);

        jMenu26.setText("Edit");
        jMenuBar13.add(jMenu26);

        jMenu27.setText("File");
        jMenuBar14.add(jMenu27);

        jMenu28.setText("Edit");
        jMenuBar14.add(jMenu28);

        jMenu29.setText("File");
        jMenuBar15.add(jMenu29);

        jMenu30.setText("Edit");
        jMenuBar15.add(jMenu30);

        jMenu31.setText("File");
        jMenuBar16.add(jMenu31);

        jMenu32.setText("Edit");
        jMenuBar16.add(jMenu32);

        jCheckBoxMenuItem3.setSelected(true);
        jCheckBoxMenuItem3.setText("jCheckBoxMenuItem3");

        jCheckBoxMenuItem4.setSelected(true);
        jCheckBoxMenuItem4.setText("jCheckBoxMenuItem4");

        jMenu33.setText("File");
        jMenuBar17.add(jMenu33);

        jMenu34.setText("Edit");
        jMenuBar17.add(jMenu34);

        jMenu35.setText("File");
        jMenuBar18.add(jMenu35);

        jMenu36.setText("Edit");
        jMenuBar18.add(jMenu36);

        jMenu37.setText("File");
        jMenuBar19.add(jMenu37);

        jMenu38.setText("Edit");
        jMenuBar19.add(jMenu38);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        frmTablo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "İşletma Adı", "Tarih", "Fiş No", "Toplam", "Title 5", "Title 6"
            }
        ));
        frmTablo.setName("frmTablo"); // NOI18N
        jScrollPane1.setViewportView(frmTablo);

        textBoxisletme.setName("textBoxisletme"); // NOI18N

        textBoxtarih.setName("textBoxtarih"); // NOI18N

        jButton1.setText("ara");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("İşletme Adı");

        jLabel2.setText("Tarih");

        listboxButton.setText("listBox ile farklı sekmede göster");
        listboxButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                listboxButtonMouseClicked(evt);
            }
        });

        uploadButton.setText("upload");
        uploadButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uploadButtonMouseClicked(evt);
            }
        });
        uploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uploadButtonActionPerformed(evt);
            }
        });

        jButton2.setText("showList");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(uploadButton, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(parsingArea, javax.swing.GroupLayout.PREFERRED_SIZE, 400, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(50, 50, 50)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton1)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(textBoxisletme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(textBoxtarih, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addComponent(listboxButton))
                            .addComponent(jButton2, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(jButton2)
                        .addGap(96, 96, 96)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(textBoxisletme, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textBoxtarih, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(listboxButton))
                    .addComponent(uploadButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(parsingArea, javax.swing.GroupLayout.DEFAULT_SIZE, 449, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void listboxButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listboxButtonMouseClicked
        // TODO add your handling code here:

        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new listBox().setVisible(true);
            }
        });


    }//GEN-LAST:event_listboxButtonMouseClicked
    Image image;
    File selectedFile = null;
    private void uploadButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uploadButtonMouseClicked
        // TODO add your handling code here:

        JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());

        int returnValue = jfc.showOpenDialog(null);
        // int returnValue = jfc.showSaveDialog(null);

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            selectedFile = jfc.getSelectedFile();
            //System.out.println(selectedFile.getAbsolutePath());

        }
//BufferedImage dimg = new BufferedImage(300,200,selectedFile.);

        try {

            File input = new File(selectedFile.getAbsolutePath());
            BufferedImage image4 = ImageIO.read(input);

            BufferedImage result = new BufferedImage(
                    image4.getWidth() ,
                    image4.getHeight() ,
                    BufferedImage.TYPE_BYTE_BINARY);

            Graphics2D graphic2 = result.createGraphics();
            graphic2.drawImage(image4, 0, 0, image4.getWidth() , image4.getHeight() , rootPane);
            //    graphic2.drawImage(image4, 0,0,Color.black,rootPane);

            graphic2.dispose();

            File output = new File("C:\\Users\\sams\\Desktop\\proje_1_yazlab\\gecici.jpg");
            ImageIO.write(result, "jpg", output);

        } catch (IOException e) {
            e.printStackTrace();
        }

        ImageIcon icon = new ImageIcon(selectedFile.getAbsolutePath()); // load the image to a imageIcon
        Image a2 = icon.getImage(); // transform it 
        Image newimg = a2.getScaledInstance(400, 449, java.awt.Image.SCALE_SMOOTH); // scale it the smooth way  
        icon = new ImageIcon(newimg);  // transform it back

        uploadButton.setIcon(icon);

        ITesseract image = new Tesseract();
        image.setLanguage("tur");
        try {

            String str = image.doOCR(new File("C:\\Users\\sams\\Desktop\\proje_1_yazlab\\gecici.jpg")).trim();
            parsingArea.setText(str);
            String[] dizi = str.split("\n");
            String sirketAdi = "";
            String tarih = "";
            String fisNo = "";
            String urun = "";
            double fiyat = 0;
            double kdv = 0;
            float toplam = 0;
            double urunfiyatı = 0;
            String AsDeger = "";
            for (int i = 0; i < dizi.length; i++) {
                // System.out.println(dizi[i]);
                String[] spDizi = dizi[i].split(" ");
                AsDeger = Asdonder(spDizi);

                String tar = TarihDon(spDizi);
                String fis = fisNoDon(spDizi);
                Float toplm = toplamDon(spDizi);
                double kdvdn = kdvDon(spDizi);
                //double urnfyt = urunfiyatiDon(spDizi);

                if (!"".equals(AsDeger)) {
                    sirketAdi = AsDeger;
                }

                if (!"".equals(tar)) {
                    tarih = tar;
                }
                if (!"".equals(fis)) {
                    fisNo = fis;
                }
                /* if (urnfyt != 0) {
                 urunfiyatı = urnfyt;
                 }*/

                if (kdvdn != 0) {
                    kdv = kdvdn;
                }

                if (toplm != 0) {
                    toplam = toplm;
                }

            }

            if ("".equals(AsDeger)) {
                sirketAdi = dizi[0];
            }
            System.out.println("*************************************************");

            System.out.println("sirket:" + sirketAdi);
            System.out.println("tarih:" + tarih);
            System.out.println("fisNo:" + fisNo);
            System.out.println("urun:" + urun);
            System.out.println("toplam:" + toplam);
            System.out.println("kdv:" + kdv);

            sirketTablosunaKayitEkle(sirketAdi);
            if ("".equals(fisNo) || fisNo == null) {
                fisNo = "0";
            }
          

            kayitEkle(sirketAdi, tarih, Integer.parseInt(fisNo), urun, kdv, toplam);

            for (int i = 0; i < dizi.length; i++) {
                String urunBilgisi = "";
                String[] spDizi2 = dizi[i].split(" ");
                // int len=spDizi.length;
                String str2 = spDizi2[spDizi2.length - 1];

                String[] a = spDizi2[spDizi2.length - 1].split(",.");

                if ((spDizi2[spDizi2.length - 1].contains("0,") || spDizi2[spDizi2.length - 1].contains("4,")
                        || spDizi2[spDizi2.length - 1].contains("8,") || spDizi2[spDizi2.length - 1].contains("9,")
                        || spDizi2[spDizi2.length - 1].contains("1,") || spDizi2[spDizi2.length - 1].contains("5,")
                        || spDizi2[spDizi2.length - 1].contains("2,") || spDizi2[spDizi2.length - 1].contains("6,")
                        || spDizi2[spDizi2.length - 1].contains("3,") || spDizi2[spDizi2.length - 1].contains("7,")
                        || spDizi2[spDizi2.length - 1].contains("0.") || spDizi2[spDizi2.length - 1].contains("4.")
                        || spDizi2[spDizi2.length - 1].contains("8.") || spDizi2[spDizi2.length - 1].contains("9.")
                        || spDizi2[spDizi2.length - 1].contains("1.") || spDizi2[spDizi2.length - 1].contains("5.")
                        || spDizi2[spDizi2.length - 1].contains("2.") || spDizi2[spDizi2.length - 1].contains("6.")
                        || spDizi2[spDizi2.length - 1].contains("3.") || spDizi2[spDizi2.length - 1].contains("7."))
                        && (!"TUPLAM".equals(spDizi2[0]) && !"kdv".equals(spDizi2[0])
                        && !"KDV".equals(spDizi2[0]) && !"TOPLAM".equals(spDizi2[0])
                        && !"TOPKDV".equals(spDizi2[0]) && !"TopKdv".equals(spDizi2[0])
                        && !"toplamkdv".equals(spDizi2[0]) && !"TOPLAMKDV".equals(spDizi2[0])
                        && !"toplam".equals(spDizi2[0]) && !"Toplam".equals(spDizi2[0])
                        && !"Top".equals(spDizi2[0]) && !"top".equals(spDizi2[0])
                        && !"POSTAN".equals(spDizi2[0]) && !"PARA".equals(spDizi2[0])
                        && !"TOPISK".equals(spDizi2[0]) && !"NAKİT".equals(spDizi2[0]))
                        && !spDizi2[spDizi2.length - 1].contains("...")) {

                    urunBilgisi = dizi[i];
                    urunlerEkle(Integer.parseInt(fisNo), urunBilgisi);

                }
                /*
                 if (a.length > 1) {

                 if (!"TUPLAM".equals(spDizi2[0]) && !"kdv".equals(spDizi2[0])
                 && !"KDV".equals(spDizi2[0]) && !"TOPLAM".equals(spDizi2[0])
                 && !"TOPKDV".equals(spDizi2[0]) && !"TopKdv".equals(spDizi2[0])
                 && !"toplamkdv".equals(spDizi2[0]) && !"TOPLAMKDV".equals(spDizi2[0])
                 && !"toplam".equals(spDizi2[0]) && !"Toplam".equals(spDizi2[0])
                 && !"Top".equals(spDizi2[0]) && !"top".equals(spDizi2[0])) {
                 urunBilgisi = dizi[i];
                 urunlerEkle(Integer.parseInt(fisNo), urunBilgisi);
                 }

                 }
                 */ {

                }
            }

        } catch (TesseractException e) {
            System.err.println(e.getMessage());
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(frm.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_uploadButtonMouseClicked


    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String sirketAdi = textBoxisletme.getText();
        String tarih = textBoxtarih.getText();
        try {
            tabloDoldur(sirketAdi, tarih);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(frm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(frm.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked

// TODO add your handling code here:
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        listBox frm = new listBox();
        frm.show();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void uploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uploadButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_uploadButtonActionPerformed

    public void kayitEkleTabloDoldur(String sirketAdi, String tarih) throws ClassNotFoundException, SQLException {
        String sql = "select * from fisdepo where 1=1";

        sql += " and isletme='" + sirketAdi + "'";

        sql += " and  tarih='" + tarih + "'";

        //and tarih='" + tarih + "'";
        MysqlConnect cnn = new MysqlConnect();
        Statement statement = cnn.conn().createStatement();

        ResultSet rs = statement.executeQuery(sql);//Veritabanındaki tabloya bağlandık

        int colcount = rs.getMetaData().getColumnCount();//Veritabanındaki tabloda kaç tane sütun var?

        DefaultTableModel tm = new DefaultTableModel(); //Model oluşturuyoruz

        for (int i = 1; i <= colcount; i++) {
            tm.addColumn(rs.getMetaData().getColumnName(i)); //Tabloya sütun ekliyoruz veritabanımızdaki sütun ismiyle aynı olacak şekilde
        }
        while (rs.next()) {

            Object[] row = new Object[colcount];

            for (int i = 1; i <= colcount; i++) {
                row[i - 1] = rs.getObject(i);
            }

            tm.addRow(row);

        }

        frmTablo.setModel(tm);

    }

    public void tabloDoldur(String sirketAdi, String tarih) throws ClassNotFoundException, SQLException {
        MysqlConnect cnn2 = new MysqlConnect();
        Statement statement2 = cnn2.conn().createStatement();

        String sql2 = "select * from isletmeler_yeni where isletme_adi like '%" + sirketAdi + "%'";

        ResultSet rs2 = statement2.executeQuery(sql2);//Verit
        int isletme_id = 0;

        while (rs2.next()) {
            isletme_id = rs2.getInt("id");
        }

        cnn2.conn().close();

        String sql = "select * from fisdepo where 1=01";
        if (!"".equals(sirketAdi) && sirketAdi != null) {
            sql += " and isletme_id='" + isletme_id + "'";
        }
        if (!"".equals(tarih) && tarih != null) {
            sql += " and  tarih='" + tarih + "'";
        }
        //and tarih='" + tarih + "'";
        MysqlConnect cnn = new MysqlConnect();
        Statement statement = cnn.conn().createStatement();

        ResultSet rs = statement.executeQuery(sql);//Veritabanındaki tabloya bağlandık

        int colcount = rs.getMetaData().getColumnCount();//Veritabanındaki tabloda kaç tane sütun var?

        DefaultTableModel tm = new DefaultTableModel(); //Model oluşturuyoruz

        for (int i = 1; i <= colcount; i++) {
            tm.addColumn(rs.getMetaData().getColumnName(i)); //Tabloya sütun ekliyoruz veritabanımızdaki sütun ismiyle aynı olacak şekilde
        }
        while (rs.next()) {

            Object[] row = new Object[colcount];

            for (int i = 1; i <= colcount; i++) {
                row[i - 1] = rs.getObject(i);
            }

            tm.addRow(row);

        }

        frmTablo.setModel(tm);

    }

    public void sirketTablosunaKayitEkle(String sirketAdi) throws ClassNotFoundException, SQLException {
//ilk resmi upload eder isletmelere fisteki sirket ismi eklenecegi icin method yazdim
        try {

            //---burasi sirket tablosunda yani isletmeler tablosuna aynı isimde kayıt eklemesindiye kontrol ekledim 
            MysqlConnect cnn = new MysqlConnect();
            Statement statement = cnn.conn().createStatement();

            String sql = "select * from isletmeler_yeni where isletme_adi='" + sirketAdi + "'";

            ResultSet rs = statement.executeQuery(sql);//Verit
            int count = 0;

            while (rs.next()) {
                count++;
            }
            cnn.conn().close();

            //-------------------------
            //burasi sirket isim kontrolunda isletmeler tablosunda kayıt yokda yeni sirket adinda kayit ekle 
            if (count == 0) {

                MysqlConnect cnn2 = new MysqlConnect();
                Statement statement2 = cnn2.conn().createStatement();
                // String sql = "INSERT INTO `fisdepo`(`isletme`, `tarih`, `fisNo`, `urun`, `kdv`, `toplam`) VALUES ([value-1],[value-2],[value-3],[value-4],[value-5],[value-6])"; 
                String sql2 = "INSERT INTO isletmeler_yeni(isletme_adi) VALUES ('" + sirketAdi + "')";
                int deger = statement.executeUpdate(sql2);
                System.out.println("deger:" + deger);

                cnn2.conn().close();
            }
        } catch (Exception e) {
            System.out.println("faield:" + e);
        }
//----------------------------------------
    }

    public void urunlerEkle(Integer fisNo, String urunBilgi) throws ClassNotFoundException, SQLException {
        if (getKayitvarmi() == 0) {
            try {
                MysqlConnect cnn = new MysqlConnect();
                Statement statement = cnn.conn().createStatement();
                // String sql = "INSERT INTO `fisdepo`(`isletme`, `tarih`, `fisNo`, `urun`, `kdv`, `toplam`) VALUES ([value-1],[value-2],[value-3],[value-4],[value-5],[value-6])"; 
                String sql = "INSERT INTO urunler_yeni(fisNo, urunBilgileri) VALUES (" + fisNo + ",'" + urunBilgi + "')";
                int deger = statement.executeUpdate(sql);
                //System.out.println("deger:" + deger);
                //(fisNo, urunBilgi);
                cnn.conn().close();
            } catch (Exception e) {
                System.out.println("faield:" + e);
            }
        } else {

            int secim = 0;
            String[] options = {"Uyari",};

            secim = JOptionPane.showOptionDialog(null, "Kayıt Zaten Var !", "Ok", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);

        }

    }

    public void kayitEkle(String sirketAdi, String tarih, Integer fisNo, String urun, double kdv, Float toplam) throws ClassNotFoundException, SQLException {

        MysqlConnect cnn3 = new MysqlConnect();
        Statement statement2 = cnn3.conn().createStatement();

        String sql2 = "select * from isletmeler_yeni where isletme_adi='" + sirketAdi + "'";

        ResultSet rs2 = statement2.executeQuery(sql2);//Verit
        int count = 0;
        int maxId = 0;

        while (rs2.next()) {
            maxId = Integer.parseInt(rs2.getString("id"));
        }
        cnn3.conn().close();

        MysqlConnect cnn4 = new MysqlConnect();
        Statement statement4 = cnn4.conn().createStatement();

        String sql4 = "select * from fisdepo where isletme='" + sirketAdi + "' and fisNo='" + fisNo + "'";

        ResultSet rs4 = statement2.executeQuery(sql4);//Verit
        int count4 = 0;
        int maxId4 = 0;

        while (rs4.next()) {
            maxId4 = Integer.parseInt(rs4.getString("id"));
        }
        cnn4.conn().close();

        if (maxId4 == 0) {
            try {
                MysqlConnect cnn = new MysqlConnect();
                Statement statement = cnn.conn().createStatement();
                // String sql = "INSERT INTO `fisdepo`(`isletme`, `tarih`, `fisNo`, `urun`, `kdv`, `toplam`) VALUES ([value-1],[value-2],[value-3],[value-4],[value-5],[value-6])"; 
                String sql = "INSERT INTO fisdepo(isletme, tarih, fisNo, kdv, toplam,isletme_id) VALUES ('" + sirketAdi + "','" + tarih + "'," + fisNo + "," + kdv + "," + toplam + "," + maxId + ")";
                int deger = statement.executeUpdate(sql);
                System.out.println("deger:" + deger);
                kayitEkleTabloDoldur(sirketAdi, tarih);
                cnn.conn().close();
            } catch (Exception e) {
                System.out.println("faield:" + e);
            }
        } else {
            setKayitvarmi(1);
        }

    }

    public String Asdonder(String[] dizi) {
        String deger = "";
        for (int i = 0; i < dizi.length; i++) {
            System.out.println(dizi[i]);
            if ("A.Ş".equals(dizi[i]) || "A.$".equals(dizi[i])) {
                deger = dizi[i];
                break;
            }

        }

        return deger;
    }

    public String TarihDon(String[] dizi) {
        String deger = "";
        for (int i = 0; i < dizi.length; i++) {
            System.out.println(dizi[i]);
            if ("Tarih".equals(dizi[i]) || "TARİH".equals(dizi[i])
                    || "TARiH".equals(dizi[i]) || "tarih".equals(dizi[i])
                    || "TARIH".equals(dizi[i]) || "TARıH".equals(dizi[i]) || "tarıh".equals(dizi[i])) {
                deger = dizi[i + 1];
                if (dizi[i + 1].length() > 2) {
                    deger = dizi[i + 1];
                } else {
                    deger = dizi[i + 2];
                }

                break;
            }

        }

        for (int i = 0; i < dizi.length; i++) {
            System.out.println(dizi[i]);

            if (dizi[i].contains(".01.") || dizi[i].contains(".05.") || dizi[i].contains(".09.")
                    || dizi[i].contains(".02.") || dizi[i].contains(".06.") || dizi[i].contains(".10.")
                    || dizi[i].contains(".03.") || dizi[i].contains(".07.") || dizi[i].contains(".11.")
                    || dizi[i].contains(".04.") || dizi[i].contains(".08.") || dizi[i].contains(".12.")
                    || dizi[i].contains("/01/") || dizi[i].contains("/05/") || dizi[i].contains("/09/")
                    || dizi[i].contains("/02/") || dizi[i].contains("/06/") || dizi[i].contains("/10/")
                    || dizi[i].contains("/03/") || dizi[i].contains("/07/") || dizi[i].contains("/11/")
                    || dizi[i].contains("/04/") || dizi[i].contains("/08/") || dizi[i].contains("/12/")) {

                deger = dizi[i];

                break;
            }

        }

        return deger;
    }

    public double kdvDon(String[] dizi) {
        //boolean deger = false;
        double deger = 0;
        String b = "0.";
        for (int i = 0; i < dizi.length; i++) {
            System.out.println(dizi[i]);
            if ("kdv".equals(dizi[i]) || "KDV".equals(dizi[i]) || "TOPKDV".equals(dizi[i]) || "TopKdv".equals(dizi[i]) || "toplamkdv".equals(dizi[i]) || "TOPLAMKDV".equals(dizi[i])) {
                String[] a = dizi[dizi.length - 1].split(",");

                for (int j = 0; j < a.length; j++) {
                    String str = a[0].substring(0, 1);//*14555555555
                    if ("*".equals(str)) {
                        a[0] = a[0].substring(1, a[0].length());
                    }
                    try {
                        // a[j] = a[j].replaceAll("*", "");

                        if (deger == 0) {
                            deger += Double.parseDouble(a[0]);
                            b += a[1];
                            deger += Double.parseDouble(b);
                        }

                    } catch (NumberFormatException | NullPointerException nfe) {

                    }

                }

                break;
            }

        }
        System.out.println("kdv : " + deger);
        return deger;
    }

    public float toplamDon(String[] dizi) {
        //boolean deger = false;
        float deger = 0;
        String b = "0.";
        for (int i = 0; i < dizi.length; i++) {
            // System.out.println(dizi[i]);
            if ((dizi[i].contains("toplam") || dizi[i].contains("Toplam")
                    || dizi[i].contains("TOP") || dizi[i].contains("Top")
                    || dizi[i].contains("top") || dizi[i].contains("TOPLAM")
                    || dizi[i].contains("TUPLAM"))
                    && !(dizi[i].contains("KDV"))) {
                String[] a = dizi[dizi.length - 1].split(",");
                for (int j = 0; j < dizi.length; j++) {
                    String str = a[0].substring(0, 1);//*14555555555
                    if ("*".equals(str) || "\"".equals(str)) {
                        a[0] = a[0].substring(1, a[0].length());
                    }
                    // String[] a = dizi[j].split(",");

                    try {

                        if (deger == 0) {
                            deger += Float.parseFloat(a[0]);
                            b += a[1];
                            deger += Float.parseFloat(b);
                        }

                    } catch (NumberFormatException | NullPointerException nfe) {

                    }

                }

                break;
            }

        }

        return deger;
    }

    public String fisNoDon(String[] dizi) {
        String deger = "";
        if (dizi.length > 1) {
            for (int i = 0; i < dizi.length; i++) {
                System.out.println(dizi[i]);
                if ("FişNo".equals(dizi[i]) || "FişNo:".equals(dizi[i])
                        || "FisNo:".equals(dizi[i]) || "FisNo".equals(dizi[i])
                        || "fisno:".equals(dizi[i]) || "fisno:".equals(dizi[i])
                        || "fişno:".equals(dizi[i]) || "fişno".equals(dizi[i])
                        || "FİŞNO:".equals(dizi[i]) || "FİŞNO".equals(dizi[i])
                        || "FİŞNO".equals(dizi[i]) || "FISNO".equals(dizi[i])
                        || "FISNU:".equals(dizi[i])
                        || "FişNu".equals(dizi[i]) || "FişNu:".equals(dizi[i])
                        || "FisNu:".equals(dizi[i]) || "FisNu".equals(dizi[i])
                        || "fisnu:".equals(dizi[i]) || "fisnu:".equals(dizi[i])
                        || "fişnu:".equals(dizi[i]) || "fişnu".equals(dizi[i])
                        || "FİŞNU:".equals(dizi[i]) || "FİŞNu".equals(dizi[i])
                        || "FİŞNU".equals(dizi[i]) || "FISNU".equals(dizi[i])
                        || "FISNU:".equals(dizi[i])) {
                    deger = dizi[i + 1];

                    if (dizi[i + 1].length() > 2) {
                        deger = dizi[i + 1];
                    } else {
                        deger = dizi[i + 2];
                    }

                    break;
                }
                //sadece fiş
                if (("Fiş".equals(dizi[i]) || ("Fis".equals(dizi[i]))
                        || "FİŞ".equals(dizi[i]) || ("FİS".equals(dizi[i]))
                        || "FIS".equals(dizi[i]) || ("FIS".equals(dizi[i]))
                        || "fiş".equals(dizi[i]))
                        && (!"No:".equals(dizi[i + 1])) && (!"no:".equals(dizi[i + 1]))
                        && (!"NO:".equals(dizi[i + 1]))
                        && (!"Nu:".equals(dizi[i + 1])) && (!"nu:".equals(dizi[i + 1]))
                        && (!"NU:".equals(dizi[i + 1]))) { // 
                    //FİS:007

                    if (dizi[i + 1].equals(":")) {
                        deger = dizi[i + 2];
                    } else {
                        deger = dizi[i + 1];
                    }

                    if (dizi[i + 1].length() > 2) {
                        deger = dizi[i + 1];
                    } else {
                        deger = dizi[i + 2];
                    }

                    break;
                }
                //fiş ve sonrası no ise
                if (("Fiş".equals(dizi[i]) || ("FİŞ".equals(dizi[i])) || ("fiş".equals(dizi[i]))
                        || ("FIŞ".equals(dizi[i])) || ("FIş".equals(dizi[i])) || ("Fİş".equals(dizi[i])))
                        && (("no:".equals(dizi[i + 1])) || ("No:".equals(dizi[i + 1]))
                        || ("NO:".equals(dizi[i + 1])) || ("NO".equals(dizi[i + 1]))
                        || ("No".equals(dizi[i + 1])) || ("no".equals(dizi[i + 1])) || ("nu:".equals(dizi[i + 1])) || ("Nu:".equals(dizi[i + 1]))
                        || ("NU:".equals(dizi[i + 1])) || ("NU".equals(dizi[i + 1]))
                        || ("Nu".equals(dizi[i + 1])) || ("nu".equals(dizi[i + 1])))) { // Fiş

                    if (dizi[i + 2].equals(":")) {
                        deger = dizi[i + 3];
                    } else {
                        deger = dizi[i + 2];
                    }

                    if (dizi[i + 1].length() > 2) {
                        deger = dizi[i + 1];
                    } else {
                        deger = dizi[i + 2];
                    }

                    break;
                }

            }
        }
        if ("NO:".equals(deger) || "NU:".equals(deger)) {
            deger = dizi[dizi.length - 1];
        }

        return deger;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable frmTablo;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem3;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem4;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu10;
    private javax.swing.JMenu jMenu11;
    private javax.swing.JMenu jMenu12;
    private javax.swing.JMenu jMenu13;
    private javax.swing.JMenu jMenu14;
    private javax.swing.JMenu jMenu15;
    private javax.swing.JMenu jMenu16;
    private javax.swing.JMenu jMenu17;
    private javax.swing.JMenu jMenu18;
    private javax.swing.JMenu jMenu19;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu20;
    private javax.swing.JMenu jMenu21;
    private javax.swing.JMenu jMenu22;
    private javax.swing.JMenu jMenu23;
    private javax.swing.JMenu jMenu24;
    private javax.swing.JMenu jMenu25;
    private javax.swing.JMenu jMenu26;
    private javax.swing.JMenu jMenu27;
    private javax.swing.JMenu jMenu28;
    private javax.swing.JMenu jMenu29;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu30;
    private javax.swing.JMenu jMenu31;
    private javax.swing.JMenu jMenu32;
    private javax.swing.JMenu jMenu33;
    private javax.swing.JMenu jMenu34;
    private javax.swing.JMenu jMenu35;
    private javax.swing.JMenu jMenu36;
    private javax.swing.JMenu jMenu37;
    private javax.swing.JMenu jMenu38;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenu jMenu6;
    private javax.swing.JMenu jMenu7;
    private javax.swing.JMenu jMenu8;
    private javax.swing.JMenu jMenu9;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar10;
    private javax.swing.JMenuBar jMenuBar11;
    private javax.swing.JMenuBar jMenuBar12;
    private javax.swing.JMenuBar jMenuBar13;
    private javax.swing.JMenuBar jMenuBar14;
    private javax.swing.JMenuBar jMenuBar15;
    private javax.swing.JMenuBar jMenuBar16;
    private javax.swing.JMenuBar jMenuBar17;
    private javax.swing.JMenuBar jMenuBar18;
    private javax.swing.JMenuBar jMenuBar19;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuBar jMenuBar3;
    private javax.swing.JMenuBar jMenuBar4;
    private javax.swing.JMenuBar jMenuBar5;
    private javax.swing.JMenuBar jMenuBar6;
    private javax.swing.JMenuBar jMenuBar7;
    private javax.swing.JMenuBar jMenuBar8;
    private javax.swing.JMenuBar jMenuBar9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton listboxButton;
    private java.awt.TextArea parsingArea;
    private java.awt.TextField textBoxisletme;
    private java.awt.TextField textBoxtarih;
    private javax.swing.JButton uploadButton;
    // End of variables declaration//GEN-END:variables
}
